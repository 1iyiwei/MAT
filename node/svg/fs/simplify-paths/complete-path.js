"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const loop_1 = require("../../../loop");
const complete_loop_1 = require("./complete-loop");
const get_initial_x_1 = require("./get-initial-x");
const get_loop_metrics_1 = require("./get-loop-metrics");
/**
 * @hidden
 * @param intersections
 * @param loopsTaken
 * @param loop
 * @param parent
 */
function completePath(intersections, loopsTaken, parent, loop) {
    // Each loop generated by xs in xStack will give rise to one componentLoop. 
    // The initial intersection in the stack is a dummy.
    /** Intersection stack */
    let initialX = get_initial_x_1.getInitialX(intersections, parent, loop);
    let curve = initialX.pos.curve;
    let xs = intersections.get(curve) || [];
    if (xs.length === 0) {
        intersections.set(curve, xs);
    }
    xs.push(initialX);
    let xStack = [initialX];
    let takenXs = new Set(); // Taken intersections
    while (xStack.length) {
        let x = xStack.pop();
        loopsTaken.add(x.pos.curve.loop);
        if (takenXs.has(x)) {
            continue;
        }
        let loopTree = get_loop_metrics_1.getLoopMetrics(x);
        loopTree.beziers = complete_loop_1.completeLoop(intersections, takenXs, xStack, loopTree, x);
        loopTree.loop = new loop_1.Loop(loopTree.beziers);
    }
}
exports.completePath = completePath;
//# sourceMappingURL=complete-path.js.map